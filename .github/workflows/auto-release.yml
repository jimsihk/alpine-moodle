name: Identify changes, tag and release

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
    secrets:
      RELEASE_BOT_APP_ID:
        required: true
      RELEASE_BOT_PRIVATE_KEY:
        required: true

permissions:
  contents: write

jobs:
  auto-tagging:
    runs-on: ubuntu-latest
    steps:
      - name: Generate release token
        id: generate_release_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.RELEASE_BOT_APP_ID }}
          private_key: ${{ secrets.RELEASE_BOT_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_release_token.outputs.token }}
          fetch-depth: 0

      - name: Load tag history and suggest next tag
        id: analyze_tag_history
        run: |
          # Retrieve latest tag
          LAST_TAG=`git describe --tags $(git rev-list --tags --max-count=1)`
          MAJOR_MINOR_V="$(echo $LAST_TAG | cut -d'.' -f1,2)"
          PATCH_V="$(echo $LAST_TAG | cut -d'.' -f3)"

          # default increment only the patch version
          NEW_PATCH_V="$((PATCH_V+1))"
          NEW_TAG="${MAJOR_MINOR_V}.${NEW_PATCH_V}"
          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT

      - name: Set next suggested tag version
        id: next_tag_version
        run: |
          echo "new_tag=${{ steps.analyze_tag_history.outputs.new_tag }}" >> $GITHUB_OUTPUT

      - name: Get container Moodle version
        id: moodle_version
        run: |
          docker run -i ${{ inputs.image }} cat /var/www/html/version.php > version.txt
          MOODLE_VERSION=$(grep "\$version" version.txt | sed 's/ //g' | cut -d';' -f1 | cut -d '=' -f2)
          MOODLE_RELEASE=$(grep "\$release" version.txt | sed 's/ //g' | cut -d';' -f1 | cut -d '=' -f2 | sed "s/'//g")
          MOODLE_BRANCH=$(grep "\$branch" version.txt | sed 's/ //g' | cut -d';' -f1 | cut -d '=' -f2 | sed "s/'//g")
          echo "version=${MOODLE_VERSION}" >> $GITHUB_OUTPUT
          echo "release=${MOODLE_RELEASE}" >> $GITHUB_OUTPUT
          echo "branch=${MOODLE_BRANCH}" >> $GITHUB_OUTPUT

          # format moodle version number to tag format
          # <branch>.<version (last 4 digits, leading zero removed)>.0
          # e.g. branch 401 & version 2022112801.04 of v4.1.1 --> 401.104.0
          T1="$MOODLE_BRANCH"
          T2=$(printf "%01d" "$(echo $MOODLE_VERSION | cut -d'.' -f1 | cut -c9- | sed 's/^0*//')")
          T3=$(echo $MOODLE_VERSION | cut -d'.' -f2)
          MOODLE_TAG="$T1.$T2$T3.0"
          echo "tag=${MOODLE_TAG}" >> $GITHUB_OUTPUT

          echo "Moodle version: ${MOODLE_VERSION}"
          echo "Moodle release: ${MOODLE_RELEASE}"
          echo "Container tag: ${MOODLE_TAG}"

      - name: Determine change in Moodle version
        id: get_changes
        run: |
          echo "[${{ steps.moodle_version.outputs.tag }}] vs [${{ steps.next_tag_version.outputs.new_tag }}]"
          # Compare up to minor version
          PREFIX_MOODLE_TAG=`echo ${{ steps.moodle_version.outputs.tag }} | cut -d'.' -f1,2`
          PREFIX_NEW_TAG=`echo ${{ steps.next_tag_version.outputs.new_tag }} | cut -d'.' -f1,2`
          if [ "$PREFIX_MOODLE_TAG" = "$PREFIX_NEW_TAG" ];
          then
            # same Moodle minor version
            echo "Use ${{ steps.next_tag_version.outputs.new_tag }}"
            echo "new_tag=${{ steps.next_tag_version.outputs.new_tag }}" >> $GITHUB_OUTPUT
          else
            # Moodle minor version changed
            echo "Use ${{ steps.moodle_version.outputs.tag }}"
            echo "new_tag=${{ steps.moodle_version.outputs.tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Generate release name
        id: release_detail
        run: |
          # Generate release name base on the tag e.g. v4.1.3.02-3
          # Moodle major, minor, patch version, e.g. 4.1.3
          R1=`echo "${{ steps.moodle_version.outputs.release }}" | sed 's/ //g' | cut -d'(' -f1 | sed 's/\+//g'`
          # Manually append the patch version ".0" if not found in Moodle version
          if [ "${R1//[^.]}" = '.' ]
          then
            R1="${R1}.0"
          fi
          # Moodle incremental, e.g. 02
          R2=`echo "${{ steps.moodle_version.outputs.version }}" | cut -d'.' -f2`
          # Repo release, e.g. 3
          R3=`echo "${{ steps.get_changes.outputs.new_tag }}" | cut -d'.' -f3`
          R_NAME="v$R1.$R2-$R3"
          echo "release_name=$R_NAME" >> $GITHUB_OUTPUT
          echo "Release name: $R_NAME"

      - name: Get commit SHA of last tag and last commit
        id: get_commit_sha
        run: |
          LAST_TAG=`git describe --tags $(git rev-list --tags --max-count=1)`
          LAST_TAG_COMMIT=`git rev-list -n 1 $LAST_TAG`
          echo "previous_tag=$LAST_TAG_COMMIT" >> $GITHUB_OUTPUT
          echo "Last tag at $LAST_TAG with SHA $LAST_TAG_COMMIT"
          #Also get last commit before using tj-actions/changed-files as it assumed the commit hash must be different or error will be returned
          LAST_COMMIT=$(git rev-parse HEAD)
          echo "last_commit=$LAST_COMMIT" >> $GITHUB_OUTPUT
          echo "Last commit SHA is $LAST_COMMIT"

      - name: Get changed container files
        if: steps.get_commit_sha.outputs.previous_tag != steps.get_commit_sha.outputs.last_commit
        id: changed-files
        uses: tj-actions/changed-files@v36.0.5
        with:
          base_sha: ${{ steps.get_commit_sha.outputs.previous_tag }}
          files: |
            rootfs/**
            Dockerfile

      - name: List changed files since last tag
        run: |
          echo "Any files changed? ${{ steps.changed-files.outputs.any_changed }}"
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"

      - name: Tag and create a GitHub release
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get_changes.outputs.new_tag }}
          commit: ${{ github.sha }}
          name: ${{ steps.release_detail.outputs.release_name }}
          skipIfReleaseExists: true
          allowUpdates: false
          generateReleaseNotes: true
          token: ${{ steps.generate_release_token.outputs.token }}
